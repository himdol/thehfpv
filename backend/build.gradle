plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.0'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'checkstyle'
    id 'jacoco'
    id 'com.github.node-gradle.node' version '4.0.0'
}

group = 'com.thehfpv'
version = '1.0.0'

java {
    sourceCompatibility = '17'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

// Node.js configuration
node {
    version = '18.19.0'
    npmVersion = '10.2.3'
    download = true
    workDir = file("${project.buildDir}/nodejs")
    npmWorkDir = file("${project.buildDir}/npm")
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    implementation 'org.springframework.boot:spring-boot-starter-mail'
    
    runtimeOnly 'mysql:mysql-connector-java:8.0.33'
    
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'
    
    // 이메일 서비스 의존성
    implementation 'com.sendgrid:sendgrid-java:4.9.3'
    implementation 'com.mailgun:mailgun-java:1.0.8'
    implementation 'com.amazonaws:aws-java-sdk-ses:1.12.565'
    
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'com.h2database:h2'
}

tasks.named('test') {
    useJUnitPlatform()
}

// Checkstyle configuration
checkstyle {
    toolVersion = '10.12.4'
    configFile = file('checkstyle.xml')
    ignoreFailures = false
    maxWarnings = 0
}

// JaCoCo configuration for code coverage
jacoco {
    toolVersion = '0.8.8'
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
        html.required = true
    }
}

// Code formatting task
task formatCode(type: JavaExec) {
    group = 'formatting'
    description = 'Format Java code using Google Java Style'
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'com.thehfpv.ThehfpvBackendApplication'
}

// Frontend tasks
task npmInstallFrontend(type: NpmTask) {
    group = 'frontend'
    description = 'Install npm dependencies'
    workingDir = file('../')
    args = ['install']
}

task npmStartFrontend(type: NpmTask) {
    group = 'frontend'
    description = 'Start React development server'
    workingDir = file('../')
    args = ['start']
    dependsOn npmInstallFrontend
}

task npmBuildFrontend(type: NpmTask) {
    group = 'frontend'
    description = 'Build React application for production'
    workingDir = file('../')
    args = ['run', 'build']
    dependsOn npmInstallFrontend
}

// Combined tasks
task startFrontend(type: Exec) {
    group = 'application'
    description = 'Start React frontend in background'
    workingDir = file('../')
    commandLine 'npm', 'start'
    doLast {
        println 'React development server started on http://localhost:3000'
    }
}

task startBackend(type: JavaExec) {
    group = 'application'
    description = 'Start Spring Boot backend'
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'com.thehfpv.ThehfpvBackendApplication'
    doLast {
        println 'Spring Boot backend started on http://localhost:8080'
    }
}

// Environment-specific tasks
task startLocal(type: JavaExec) {
    group = 'application'
    description = 'Start Spring Boot backend with local profile'
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'com.thehfpv.ThehfpvBackendApplication'
    args = ['--spring.profiles.active=local']
    doLast {
        println 'Spring Boot backend started with LOCAL profile on http://localhost:8080'
    }
}

task startDev(type: JavaExec) {
    group = 'application'
    description = 'Start Spring Boot backend with dev profile'
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'com.thehfpv.ThehfpvBackendApplication'
    args = ['--spring.profiles.active=dev']
    doLast {
        println 'Spring Boot backend started with DEV profile on http://localhost:8080'
    }
}

task startPrd(type: JavaExec) {
    group = 'application'
    description = 'Start Spring Boot backend with production profile'
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'com.thehfpv.ThehfpvBackendApplication'
    args = ['--spring.profiles.active=prd']
    doLast {
        println 'Spring Boot backend started with PRODUCTION profile on http://localhost:8080'
    }
}

task startFullStack {
    group = 'application'
    description = 'Start both frontend and backend'
    dependsOn startBackend
    doLast {
        println 'Starting React frontend...'
        Thread.start {
            project.exec {
                workingDir file('../')
                commandLine 'npm', 'start'
            }
        }
        println 'Full stack application started!'
        println 'Frontend: http://localhost:3000'
        println 'Backend: http://localhost:8080'
    }
}

// Build task that includes formatting and testing
task buildWithChecks {
    group = 'build'
    description = 'Build project with code quality checks'
    dependsOn checkstyleMain, checkstyleTest, test, jacocoTestReport
    finalizedBy bootJar
}
